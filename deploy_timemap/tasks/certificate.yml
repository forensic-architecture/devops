- name: Check if certificate already exists {{ certbot_nginx_cert_name | default(domain_name, true) }}
  stat:
    path: "/etc/letsencrypt/live/{{ certbot_nginx_cert_name | default(domain_name, true) }}/cert.pem"
  register: letsencrypt_cert

- name: "Generate new certificate if one doesn't exist"
  shell: >
    certbot certonly --nginx --email '{{ letsencrypt_email }}'
    --agree-tos -d '{{ domain_name }}'
    {% if certbot_nginx_cert_name is defined %}
    --cert-name '{{ certbot_nginx_cert_name }}'
    {% endif %}
    {% if letsencrypt_staging %} --staging {% endif %}
  when: not letsencrypt_cert.stat.exists

- name: Force generation of a new certificate
  shell: >
    certbot certonly --force-renewal --nginx --email '{{ letsencrypt_email }}'
    --agree-tos -d '{{ domain_name }}'
    {% if certbot_nginx_cert_name is defined %}
    --cert-name '{{ certbot_nginx_cert_name }}'
    {% endif %}
    {% if letsencrypt_staging %} --staging {% endif %}
  when: letsencrypt_cert.stat.exists and certbot_force_update is defined
  notify: reload nginx

- name: Insert certificate block and redirect
  blockinfile:
    path: /etc/nginx/sites-available/default
    marker: "# enter certbot block below"
    insertafter: "# enter certbot block below"
    block: |    
      listen 443 ssl; 
      ssl_certificate /etc/letsencrypt/live/{{domain_name}}/fullchain.pem;
      ssl_certificate_key /etc/letsencrypt/live/{{domain_name}}/privkey.pem;
      include /etc/letsencrypt/options-ssl-nginx.conf;

      # Redirect non-https traffic to https
      if ($scheme != "https") {
        return 301 https://$host$request_uri;
      } 
    state: present
    create: yes


    