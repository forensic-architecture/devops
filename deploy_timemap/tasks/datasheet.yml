
- name: clean datasheet repo state
  file:
    state: absent
    path: datasheet-server

- name: checkout develop branch of datasheet
  git:
    repo: "{{ lookup('env', 'DATASHEET_GIT_REPOSITORY') or 'https://github.com/forensic-architecture/datasheet-server' }}"
    dest: datasheet-server
    version: "{{ lookup('env', 'DATASHEET_GIT_BRANCH') or 'develop' }}"

- name: create credentials folder if it does not already exist
  file:
    path: credentials
    state: directory

- name: copy .env to credentials folder
  template: src=../templates/datasheet-env.j2 dest=credentials/datasheet.env

- name: copy config.js to credentials folder
  template: >
    src=../templates/datasheet_config.js.j2
    dest=credentials/datasheet_config.js

- name: create local folder if it does not already exist
  file:
    path: local
    state: directory
  when: datasheet.local is defined

- name: copy local to credentials folder
  copy:
    src: "{{ item.path }}"
    dest: local/{{ item.path | basename }}
  loop: "{{ datasheet.local }}"
  when: datasheet.local is defined

- name: copy .env to datasheet folder
  copy:
    remote_src: true
    src: credentials/datasheet.env
    dest: datasheet-server/.env

- name: copy sheets_config.js to datasheet folder
  copy:
    remote_src: true
    src: credentials/datasheet_config.js
    dest: datasheet-server/src/config.js

- name: set datasheet Name
  set_fact:
    ds_image: "{{ timemaps | map(attribute='name') | join('_') + '__datasheet' }}"
    ds_container: "{{ timemaps | map(attribute='name') | join('_') }}"

- name: remove container if exists
  docker_container:
    name: "{{ ds_container }}"
    state: absent
    force_kill: true

- name: remove image if exists
  docker_image:
    state: absent
    name: "{{ ds_image }}"
    force: true

- name: build docker image
  docker_image:
    path: datasheet-server
    name: "{{ ds_image }}"

- name: interpolate volume strings for local
  set_fact:
    local_volumes: "{{ datasheet.local | json_query('[].path') | map('basename') | map('regex_replace', '(^.*$)', '/home/' + lookup('env', 'ANSIBLE_REMOTE_USER' ) + '/local/\\1:/\\1') | list }}"
  when: datasheet.local is defined

- name: run datasheet-server in container with local volumes
  docker_container:
    name: "{{ ds_container }}"
    image: "{{ ds_image }}"
    volumes: "{{ local_volumes | list }}"
    ports:
      - "0.0.0.0:{{ datasheet.port }}:8080"
  when: datasheet.local is defined

- name: run datasheet-server in container (w/o volumes)
  docker_container:
    name: "{{ ds_container }}"
    image: "{{ ds_image }}"
    ports:
      - "0.0.0.0:{{ datasheet.port }}:8080"
  when: datasheet.local is not defined
